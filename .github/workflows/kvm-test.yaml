---
  name: Vagrant (KVM) Tests

  on:
    pull_request:
    push:
      branches:
        - "*"

  jobs:
    test-kvm:
      name: KVM Test
      runs-on: "ubuntu-latest"
      steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: "pip"

      - name: Install dependencies
        run: |
          pip install ansible

      - name: Install Ansible dependencies
        run: |
          ansible-galaxy collection install -r requirements.yaml

      - name: Create deploy folder and move inventory files
        run: |
          mkdir deploy
          cp -r inventory.template/* deploy/

          chmod +x .github/scripts/gen_inventory.sh
          ./.github/scripts/gen_inventory.sh $(hostname -s) deploy/inventory.ini

      - name: Check network adapter
        run: |
          ip a

      - name: Check hosts
        run: |
          cat /etc/hosts

      - name: Extract Network Information
        run: |
          chmod +x .github/scripts/extract_network_info.sh
          ./.github/scripts/extract_network_info.sh
          echo "adapter_name=$(cat network_info.txt | head -1 | awk '{print $2}')" >> $GITHUB_ENV
          echo "ip_range=$(cat network_info.txt | awk 'NR > 1 && $3 {print $3}')" >> $GITHUB_ENV

      - name: Update group vars
        run: |
          echo "firewall_internal_ip_range: $ip_range" >> deploy/group_vars/all.yaml
          echo "internal_interface: $adapter_name" >> deploy/group_vars/all.yaml
          echo "SlurmConfigFileDIr: /etc/slurm" >> deploy/group_vars/all.yaml

      - name: Disable unattended-upgrades
        run: |
          sudo systemctl stop unattended-upgrades
          sudo systemctl disable unattended-upgrades

          export DEBIAN_FRONTEND=noninteractive

          # Check for running apt processes and kill if necessary, without manual confirmation
          echo "Checking and killing running APT processes if necessary..."
          sudo lsof /var/lib/dpkg/lock-frontend | awk '{print $2}' | tail -n +2 | while read PID; do
              if [ ! -z "$PID" ]; then
                  echo "Killing PID $PID"
                  sudo kill -9 $PID
              fi
          done

      - name: Run ansible playbook
        run: |
          cd deploy
          ansible-playbook ../playbook.yaml -i inventory.ini --connection=local -v
        env:
          ANSIBLE_FORCE_COLOR: True
